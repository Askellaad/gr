//@version=5
//Author Joseph Cryll
indicator("Grid Trading Strategy", overlay=true)

// Function to create the grid levels
plotGrid(entryPrice, perdiffav, perdifagainst, side, takeProfit, stopLoss, favor_levels, against_levels) =>

    if side == "buy" or side == "Buy"
        var float[] highLevels = array.new_float(favor_levels)
        var float[] lowLevels = array.new_float(against_levels)

        var color[] highColors = array.new_color(favor_levels)
        var color[] lowColors = array.new_color(against_levels)

        var line[] highLines = array.new_line(favor_levels)
        var line[] lowLines = array.new_line(against_levels)

        for i = 0 to favor_levels - 1
            array.set(highLevels, i, entryPrice * (1 + (i + 1) * perdiffav / 100))
            array.set(highColors, i, color.green)
            array.set(highLines, i, na)
        
        for i = 0 to against_levels - 1
            array.set(lowLevels, i, entryPrice * (1 - (i + 1) * perdifagainst / 100))
            array.set(lowColors, i, color.red)
            array.set(lowLines, i, na)
        
        // alert(message="EntryPrice: " + str.tostring(entryPrice) + "\n" + "ticker: " + syminfo.ticker + "\n" + '"highLevels": ' + str.tostring(highLevels) + '  "LowLevels": ' + str.tostring(lowLevels))
        jsonAlert = '{' + '"secret": "miraclebot",' + '"category": "linear",' +'"symbol": "' + syminfo.ticker + '",' +'"side": "' + side + '",' + '"orderType": "Market",' +'"qty": "50",' + '"price": "' + str.tostring(entryPrice) + '",' +'"triggerPrice": "' + str.tostring(entryPrice) + '",' + '"positionIdx": "0",' + '"timeInForce": "GTC",' + '"reduceOnly": "false"' + '"Exchange": "Bybit",' +'"takeProfit": "' + str.tostring(takeProfit) + '",' + '"stopLoss": "' + str.tostring(stopLoss) + '",' + '"botOrderType": "Grid_bot_order",' + '",' +'"percentage_difference_favor": "' + str.tostring(perdiffav) + '",' + '"percentage_against_favor": "' + str.tostring(perdifagainst) + '",' + '"favor_levels": [' + str.tostring(highLevels) + '],' + '"against_levels": [' + str.tostring(lowLevels) + ']' + '}'

        alert(message=jsonAlert, freq=alert.freq_once_per_bar)
        for i = 0 to favor_levels - 1
            highLevel = array.get(highLevels, i)
            highColor = array.get(highColors, i)

            if highColor == color.green and close >= highLevel
                array.set(highColors, i, color.gray)
                alert('"highlevel": ' + str.tostring(i + 1) + ' breached, \n "Newcolor": "gray",' +  '"PrevColor": "Green", ' + '"symbol": ' + syminfo.ticker + '}', alert.freq_once_per_bar_close)
                if i > 0
                    array.set(highColors, i - 1, color.red)

        for i = 0 to against_levels - 1
            lowLevel = array.get(lowLevels, i)
            lowColor = array.get(lowColors, i)

            if lowColor == color.red and close <= lowLevel
                array.set(lowColors, i, color.gray)
                alert('"lowlevel": ' + str.tostring(i + 1) + ' breached, \n "Newcolor": "gray",' +  '"PrevColor": "Red", ' + '"symbol": ' + syminfo.ticker + '}', alert.freq_once_per_bar_close)
                if i >= 0
                    array.set(lowColors, i, color.green)

        for i = 0 to favor_levels - 1
            highLevel = array.get(highLevels, i)
            highColor = array.get(highColors, i)
            if na(array.get(highLines, i))
                array.set(highLines, i, line.new(bar_index[20], highLevel, bar_index, highLevel, color=highColor, width=1, extend=extend.right))
            else
                line.set_xy1(array.get(highLines, i), bar_index[20], highLevel)
                line.set_xy2(array.get(highLines, i), bar_index, highLevel)
                line.set_color(array.get(highLines, i), highColor)

        for i = 0 to against_levels - 1
            lowLevel = array.get(lowLevels, i)
            lowColor = array.get(lowColors, i)
            if na(array.get(lowLines, i))
                array.set(lowLines, i, line.new(bar_index[20], lowLevel, bar_index, lowLevel, color=lowColor, width=1, extend=extend.right))
            else
                line.set_xy1(array.get(lowLines, i), bar_index[20], lowLevel)
                line.set_xy2(array.get(lowLines, i), bar_index, lowLevel)
                line.set_color(array.get(lowLines, i), lowColor)

    if side == "sell" or side == "Sell"
        var float[] highLevels = array.new_float(against_levels)
        var float[] lowLevels = array.new_float(favor_levels)

        var color[] highColors = array.new_color(against_levels)
        var color[] lowColors = array.new_color(favor_levels)

        var line[] highLines = array.new_line(against_levels)
        var line[] lowLines = array.new_line(favor_levels)

        for i = 0 to against_levels - 1
            array.set(highLevels, i, entryPrice * (1 + (i + 1) * perdifagainst / 100))
            array.set(highColors, i, color.red)
            array.set(highLines, i, na)
        
        for i = 0 to favor_levels - 1
            array.set(lowLevels, i, entryPrice * (1 - (i + 1) * perdiffav / 100))
            array.set(lowColors, i, color.green)
            array.set(lowLines, i, na)

        // alert(message='"EntryPrice": ' + str.tostring(entryPrice) + "\n" + '"ticker": ' + syminfo.ticker + "\n" + "highLevels: " + str.tostring(highLevels) + '"LowLevels": ' + str.tostring(lowLevels))
        jsonAlert = '{' + '"secret": "miraclebot",' + '"category": "linear",' +'"symbol": "' + syminfo.ticker + '",' +'"side": "' + side + '",' + '"orderType": "Market",' +'"qty": "50",' + '"price": "' + str.tostring(entryPrice) + '",' +'"triggerPrice": "' + str.tostring(entryPrice) + '",' + '"positionIdx": "0",' + '"timeInForce": "GTC",' + '"reduceOnly": "false"' + '"Exchange": "Bybit",' +'"takeProfit": "' + str.tostring(takeProfit) + '",' + '"stopLoss": "' + str.tostring(stopLoss) + '",' + '"botOrderType": "Grid_bot_order",' + '",' +'"percentage_difference_favor": "' + str.tostring(perdiffav) + '",' + '"percentage_against_favor": "' + str.tostring(perdifagainst) + '",' + '"favor_levels": [' + str.tostring(highLevels) + '],' + '"against_levels": [' + str.tostring(lowLevels) + ']' + '}'
        alert(message=jsonAlert, freq=alert.freq_once_per_bar)
        for i = 0 to against_levels - 1
            highLevel = array.get(highLevels, i)
            highColor = array.get(highColors, i)
            
            if highColor == color.red and close >= highLevel
                array.set(highColors, i, color.gray)
                alert('"EntryPrice": ' + str.tostring(i + 1) + ' breached, \n "Newcolor": "gray",' +  '"PrevColor": "Red", ' + '"symbol": ' + syminfo.ticker + '}', alert.freq_once_per_bar_close)
                if i > 0
                    array.set(highColors, i , color.green)

        for i = 0 to favor_levels - 1
            lowLevel = array.get(lowLevels, i)
            lowColor = array.get(lowColors, i)

            if lowColor == color.green and close <= lowLevel
                array.set(lowColors, i, color.gray)
                alert('"lowlevel": ' + str.tostring(i + 1) + ' breached, \n "Newcolor": "gray",' +  '"PrevColor": "Green", ' + '"symbol": ' + syminfo.ticker + '}', alert.freq_once_per_bar_close)
                if i >= 0
                    array.set(lowColors, i, color.red)

        for i = 0 to against_levels - 1
            highLevel = array.get(highLevels, i)
            highColor = array.get(highColors, i)
            if na(array.get(highLines, i))
                array.set(highLines, i, line.new(bar_index[20], highLevel, bar_index, highLevel, color=highColor, width=1, extend=extend.right))
            else
                line.set_xy1(array.get(highLines, i), bar_index[20], highLevel)
                line.set_xy2(array.get(highLines, i), bar_index, highLevel)
                line.set_color(array.get(highLines, i), highColor)

        for i = 0 to favor_levels - 1
            lowLevel = array.get(lowLevels, i)
            lowColor = array.get(lowColors, i)
            if na(array.get(lowLines, i))
                array.set(lowLines, i, line.new(bar_index[20], lowLevel, bar_index, lowLevel, color=lowColor, width=1, extend=extend.right))
            else
                line.set_xy1(array.get(lowLines, i), bar_index[20], lowLevel)
                line.set_xy2(array.get(lowLines, i), bar_index, lowLevel)
                line.set_color(array.get(lowLines, i), lowColor)

// Entry price input
entry_price = input.float(defval=2.4620, title="Entry Price")

// Parameters
closeprice = close
// grid_count = input.int(defval=4, title="Number of Grid Levels")
perdiffav = input.float(defval=1, title="Percentage Difference favor")
perdifagainst = input.float(defval=2, title="Percentage Difference against")
side = input.string(defval="Buy", title="Side", options=["Buy", "Sell"])
favor_levels = input.int(defval=4, title="Favor Levels")
against_levels = input.int(defval=10, title="Against Levels")
takeProfit = input.float(defval = 3, title = "takeProfit")
stopLoss = input.float(defval = 3, title = "StopLoss")
if not na(entry_price)
    plotGrid(entry_price, perdiffav, perdifagainst, side, takeProfit, stopLoss, favor_levels, against_levels)
    // alert("entry price: " + str.tostring(entry_price))

plot(entry_price, "entry", color.yellow, 2, plot.style_line, true)
